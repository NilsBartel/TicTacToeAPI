

-- how does it start?
give whole matchHistory and let the frontend decide if there is a running match?
or have the backend give a running or new match

DATABASE:
DBUser -> make the into one method and just create a user Object

- difficulty: just always take it from the match (match.getDifficulty)





1. GET match -> takes token -> gives running or new match  (take userID from token)
2. POST match -> takes token and match -> returns match with computer move
3. ...?
4. profit

wenn ich mit dem POST für das match nur das match mit board mit gebe, dann weiß mein Program ja nicht welcher move vom spieler gemacht wurde. Soll ich den move (oder position) auch mitgeben in dem POST, oder soll das program das selber herrausfinden, quasi abgleichen mit der datenbank welcher move neu ist?



Match
 -> POST move
 -> new game
 -> select difficulty
 -> matchHistory
 -> analyse
 -> score?
 -> quit/logout

 error message as json
 - controller class
 - dont need a response class if i get a match and respond a match



 ->
 -- a class that constructs the whole response (message + header (rCode) and so on)
->



Login
 -> POST  login
 -> POST  password reset
 -> POST  create account



service classes are classes that are used once but are in another class to be less crowded





{
  "board": {
    "rows": [
      {
        "fields": [
          {
            "symbol": " "
          },
          {
            "symbol": "o"
          },
          {
            "symbol": " "
          }
        ]
      },
      {
        "fields": [
          {
            "symbol": " "
          },
          {
            "symbol": " "
          },
          {
            "symbol": " "
          }
        ]
      },
      {
        "fields": [
          {
            "symbol": " "
          },
          {
            "symbol": " "
          },
          {
            "symbol": " "
          }
        ]
      }
    ]
  },
  "status": "PLAYER_WON",
  "difficulty": "EASY",
  "isPlayerTurn": true,
  "matchID": 360,
  "startTime": 1737546384875,
  "endTime": 1737558503204
}